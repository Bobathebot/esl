{"ast":null,"code":"var _jsxFileName = \"/Users/mohamed/school-dashboard/Frontend/src/pages/ManageQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageQuestions = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [archivedQuestions, setArchivedQuestions] = useState([]);\n  const [newQuestion, setNewQuestion] = useState({\n    type: \"essay\",\n    question: \"\",\n    category: \"\"\n  });\n  const [selectedQuestions, setSelectedQuestions] = useState([]);\n  const [deadline, setDeadline] = useState(\"\");\n  const [duration, setDuration] = useState(60);\n  const [generatedLink, setGeneratedLink] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [showArchived, setShowArchived] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5001/api/questions\");\n        const allQ = response.data;\n        setQuestions(allQ.filter(q => !q.archived));\n        setArchivedQuestions(allQ.filter(q => q.archived));\n      } catch (error) {\n        console.error(\"Error fetching questions:\", error);\n      }\n    };\n    fetchQuestions();\n  }, []);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewQuestion(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const addQuestion = async () => {\n    if (!newQuestion.question || !newQuestion.category) {\n      setError(\"Please fill in all fields.\");\n      setSuccess(\"\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:5001/api/questions\", newQuestion);\n      if (response.data.success) {\n        setQuestions(prev => [...prev, response.data.question]);\n        setNewQuestion({\n          type: \"essay\",\n          question: \"\",\n          category: \"\"\n        });\n        setSuccess(\"Question added successfully.\");\n        setError(\"\");\n      } else {\n        setError(\"Failed to add question.\");\n        setSuccess(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error adding question:\", error);\n      setError(\"Error adding question.\");\n      setSuccess(\"\");\n    }\n  };\n  const archiveQuestion = async id => {\n    try {\n      const response = await axios.patch(`http://localhost:5001/api/questions/${id}/archive`);\n      if (response.data.success) {\n        const updatedQuestion = response.data.question;\n        setQuestions(prev => prev.filter(q => q._id !== id));\n        setArchivedQuestions(prev => [...prev, updatedQuestion]);\n        setSuccess(\"Question archived/unarchived successfully.\");\n        setError(\"\");\n      } else {\n        setError(\"Failed to update question.\");\n        setSuccess(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error archiving/unarchiving question:\", error);\n      setError(\"Error archiving question.\");\n      setSuccess(\"\");\n    }\n  };\n  const deleteQuestion = async id => {\n    if (!window.confirm(\"Are you sure you want to delete this question? This action cannot be undone.\")) return;\n    try {\n      const response = await axios.delete(`http://localhost:5001/api/questions/${id}`);\n      if (response.data.success) {\n        setQuestions(prev => prev.filter(q => q._id !== id));\n        setArchivedQuestions(prev => prev.filter(q => q._id !== id));\n        setSuccess(\"Question deleted successfully.\");\n        setError(\"\");\n      } else {\n        setError(\"Failed to delete question.\");\n        setSuccess(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting question:\", error);\n      setError(\"Error deleting question.\");\n      setSuccess(\"\");\n    }\n  };\n  const handleSelectQuestion = id => {\n    if (selectedQuestions.includes(id)) {\n      setSelectedQuestions(selectedQuestions.filter(qid => qid !== id));\n    } else {\n      setSelectedQuestions([...selectedQuestions, id]);\n    }\n  };\n  const generateExamLink = async () => {\n    if (selectedQuestions.length === 0) {\n      setError(\"Please select at least one question to generate an exam link.\");\n      setSuccess(\"\");\n      return;\n    }\n    if (!deadline) {\n      setError(\"Please set a deadline for the exam.\");\n      setSuccess(\"\");\n      return;\n    }\n    if (duration <= 0) {\n      setError(\"Duration must be a positive number.\");\n      setSuccess(\"\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:5001/api/exams\", {\n        questionIds: selectedQuestions,\n        deadline,\n        duration\n      });\n      if (response.data.success) {\n        setGeneratedLink(response.data.exam.link);\n        setSuccess(\"Exam link generated successfully.\");\n        setError(\"\");\n        setSelectedQuestions([]);\n      } else {\n        setError(\"Failed to generate exam link.\");\n        setSuccess(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error generating exam link:\", error);\n      setError(\"Error generating exam link.\");\n      setSuccess(\"\");\n    }\n  };\n  const handleSearch = e => {\n    setSearchTerm(e.target.value);\n  };\n  const filteredArchivedQuestions = archivedQuestions.filter(q => q.question.toLowerCase().includes(searchTerm.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageQuestions, \"t/bz0XxHPZ5sSjmmUQ8rW0OSXjM=\");\n_c = ManageQuestions;\nexport default ManageQuestions;\nvar _c;\n$RefreshReg$(_c, \"ManageQuestions\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","ManageQuestions","_s","questions","setQuestions","archivedQuestions","setArchivedQuestions","newQuestion","setNewQuestion","type","question","category","selectedQuestions","setSelectedQuestions","deadline","setDeadline","duration","setDuration","generatedLink","setGeneratedLink","error","setError","success","setSuccess","showArchived","setShowArchived","searchTerm","setSearchTerm","fetchQuestions","response","get","allQ","data","filter","q","archived","console","handleInputChange","e","name","value","target","prev","addQuestion","post","archiveQuestion","id","patch","updatedQuestion","_id","deleteQuestion","window","confirm","delete","handleSelectQuestion","includes","qid","generateExamLink","length","questionIds","exam","link","handleSearch","filteredArchivedQuestions","toLowerCase","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mohamed/school-dashboard/Frontend/src/pages/ManageQuestions.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst ManageQuestions = () => {\n  const [questions, setQuestions] = useState([]);\n  const [archivedQuestions, setArchivedQuestions] = useState([]);\n  const [newQuestion, setNewQuestion] = useState({ type: \"essay\", question: \"\", category: \"\" });\n  const [selectedQuestions, setSelectedQuestions] = useState([]);\n  const [deadline, setDeadline] = useState(\"\");\n  const [duration, setDuration] = useState(60);\n  const [generatedLink, setGeneratedLink] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [showArchived, setShowArchived] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5001/api/questions\");\n        const allQ = response.data;\n        setQuestions(allQ.filter((q) => !q.archived));\n        setArchivedQuestions(allQ.filter((q) => q.archived));\n      } catch (error) {\n        console.error(\"Error fetching questions:\", error);\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setNewQuestion((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const addQuestion = async () => {\n    if (!newQuestion.question || !newQuestion.category) {\n      setError(\"Please fill in all fields.\");\n      setSuccess(\"\");\n      return;\n    }\n\n    try {\n      const response = await axios.post(\"http://localhost:5001/api/questions\", newQuestion);\n      if (response.data.success) {\n        setQuestions((prev) => [...prev, response.data.question]);\n        setNewQuestion({ type: \"essay\", question: \"\", category: \"\" });\n        setSuccess(\"Question added successfully.\");\n        setError(\"\");\n      } else {\n        setError(\"Failed to add question.\");\n        setSuccess(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error adding question:\", error);\n      setError(\"Error adding question.\");\n      setSuccess(\"\");\n    }\n  };\n\n  const archiveQuestion = async (id) => {\n    try {\n      const response = await axios.patch(`http://localhost:5001/api/questions/${id}/archive`);\n      if (response.data.success) {\n        const updatedQuestion = response.data.question;\n        setQuestions((prev) => prev.filter((q) => q._id !== id));\n        setArchivedQuestions((prev) => [...prev, updatedQuestion]);\n        setSuccess(\"Question archived/unarchived successfully.\");\n        setError(\"\");\n      } else {\n        setError(\"Failed to update question.\");\n        setSuccess(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error archiving/unarchiving question:\", error);\n      setError(\"Error archiving question.\");\n      setSuccess(\"\");\n    }\n  };\n\n  const deleteQuestion = async (id) => {\n    if (!window.confirm(\"Are you sure you want to delete this question? This action cannot be undone.\")) return;\n    try {\n      const response = await axios.delete(`http://localhost:5001/api/questions/${id}`);\n      if (response.data.success) {\n        setQuestions((prev) => prev.filter((q) => q._id !== id));\n        setArchivedQuestions((prev) => prev.filter((q) => q._id !== id));\n        setSuccess(\"Question deleted successfully.\");\n        setError(\"\");\n      } else {\n        setError(\"Failed to delete question.\");\n        setSuccess(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting question:\", error);\n      setError(\"Error deleting question.\");\n      setSuccess(\"\");\n    }\n  };\n\n  const handleSelectQuestion = (id) => {\n    if (selectedQuestions.includes(id)) {\n      setSelectedQuestions(selectedQuestions.filter((qid) => qid !== id));\n    } else {\n      setSelectedQuestions([...selectedQuestions, id]);\n    }\n  };\n\n  const generateExamLink = async () => {\n    if (selectedQuestions.length === 0) {\n      setError(\"Please select at least one question to generate an exam link.\");\n      setSuccess(\"\");\n      return;\n    }\n\n    if (!deadline) {\n      setError(\"Please set a deadline for the exam.\");\n      setSuccess(\"\");\n      return;\n    }\n\n    if (duration <= 0) {\n      setError(\"Duration must be a positive number.\");\n      setSuccess(\"\");\n      return;\n    }\n\n    try {\n      const response = await axios.post(\"http://localhost:5001/api/exams\", {\n        questionIds: selectedQuestions,\n        deadline,\n        duration,\n      });\n\n      if (response.data.success) {\n        setGeneratedLink(response.data.exam.link);\n        setSuccess(\"Exam link generated successfully.\");\n        setError(\"\");\n        setSelectedQuestions([]);\n      } else {\n        setError(\"Failed to generate exam link.\");\n        setSuccess(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error generating exam link:\", error);\n      setError(\"Error generating exam link.\");\n      setSuccess(\"\");\n    }\n  };\n\n  const handleSearch = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const filteredArchivedQuestions = archivedQuestions.filter((q) =>\n    q.question.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Add New Question */}\n      {/* ... Keep your existing JSX code here to maintain the same look */}\n      {/* Generate Exam Link, Manage Questions List, etc. remain the same */}\n      {/* The structure is the same as the code you provided initially */}\n      {/* Just ensure all references (like axios endpoints) are correct */}\n      \n      {/* I won't rewrite all JSX since you already have it.\n          Just copy your existing ManageQuestions code's JSX here. */}\n    </div>\n  );\n};\n\nexport default ManageQuestions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}